FUNCTION ZIDOC_INPUT_ZCHGPOINT1_CREATE.
*"--------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(INPUT_METHOD) LIKE  BDWFAP_PAR-INPUTMETHD
*"     VALUE(MASS_PROCESSING) LIKE  BDWFAP_PAR-MASS_PROC
*"  EXPORTING
*"     VALUE(WORKFLOW_RESULT) LIKE  BDWF_PARAM-RESULT
*"     VALUE(APPLICATION_VARIABLE) LIKE  BDWF_PARAM-APPL_VAR
*"     VALUE(IN_UPDATE_TASK) LIKE  BDWFAP_PAR-UPDATETASK
*"     VALUE(CALL_TRANSACTION_DONE) LIKE  BDWFAP_PAR-CALLTRANS
*"  TABLES
*"      IDOC_CONTRL STRUCTURE  EDIDC
*"      IDOC_DATA STRUCTURE  EDIDD
*"      IDOC_STATUS STRUCTURE  BDIDOCSTAT
*"      RETURN_VARIABLES STRUCTURE  BDWFRETVAR
*"      SERIALIZATION_INFO STRUCTURE  BDI_SER
*"  EXCEPTIONS
*"      WRONG_FUNCTION_CALLED
*"--------------------------------------------------------------------
*----------------------------------------------------------------------*
*  this function module is generated                                   *
*          never change it manually, please!        12.04.2017         *
*----------------------------------------------------------------------*

  DATA:
      Z1ZCHGPOINT1_CREATE like Z1ZCHGPOINT1_CREATE,
      E1BPFLAG like E1BPFLAG,
      E1BP1012_TSK_C like E1BP1012_TSK_C,
      E1BP1012_MTK_C like E1BP1012_MTK_C,
      E1BP1012_SEQ_C like E1BP1012_SEQ_C,
      E1BP1012_OPR_C like E1BP1012_OPR_C,
      E1BP1012_SUB_OPR_C like E1BP1012_SUB_OPR_C,
      E1BP1012_REF_OPR_C like E1BP1012_REF_OPR_C,
      E1BP1012_WC_REF_OPR_C like E1BP1012_WC_REF_OPR_C,
      E1BP1012_COM_C like E1BP1012_COM_C,
      E1BP1012_PRT_C like E1BP1012_PRT_C,
      E1BP1012_CHA_C like E1BP1012_CHA_C,
      E1BP1012_TXT_HDR_C like E1BP1012_TXT_HDR_C,
      E1BP1012_TXT_C like E1BP1012_TXT_C,

      GROUP like
        BAPI1012_TSK_C-TASK_LIST_GROUP,
      GROUPCOUNTER like
        BAPI1012_TSK_C-GROUP_COUNTER,
      TESTRUN like
        BAPIFLAG,
      PROFILE like
        BAPI1012_CONTROL_DATA-PROFILE,
      BOMUSAGE like
        BAPI1012_CONTROL_DATA-BOM_USAGE,
      APPLICATION like
        BAPI1012_CONTROL_DATA-APPLICATION,

      TASK like BAPI1012_TSK_C
                  occurs 0 with header line,
      MATERIALTASKALLOCATION like BAPI1012_MTK_C
                  occurs 0 with header line,
      SEQUENCE like BAPI1012_SEQ_C
                  occurs 0 with header line,
      OPERATION like BAPI1012_OPR_C
                  occurs 0 with header line,
      SUBOPERATION like BAPI1012_SUB_OPR_C
                  occurs 0 with header line,
      REFERENCEOPERATION like BAPI1012_REF_OPR_C
                  occurs 0 with header line,
      WORKCENTERREFERENCE like BAPI1012_WC_REF_OPR_C
                  occurs 0 with header line,
      COMPONENTALLOCATION like BAPI1012_COM_C
                  occurs 0 with header line,
      PRODUCTIONRESOURCE like BAPI1012_PRT_C
                  occurs 0 with header line,
      INSPCHARACTERISTIC like BAPI1012_CHA_C
                  occurs 0 with header line,
      TEXTALLOCATION like BAPI1012_TXT_HDR_C
                  occurs 0 with header line,
      TEXT like BAPI1012_TXT_C
                  occurs 0 with header line,
      RETURN like BAPIRET2
                  occurs 0 with header line,

      T_EDIDD  LIKE EDIDD OCCURS 0 WITH HEADER LINE,
      BAPI_RETN_INFO  LIKE BAPIRET2 OCCURS 0 WITH HEADER LINE.

  DATA: ERROR_FLAG,
        BAPI_IDOC_STATUS LIKE BDIDOCSTAT-STATUS.

  IN_UPDATE_TASK = 'X'.
  CLEAR CALL_TRANSACTION_DONE.
* check if the function is called correctly                            *
  READ TABLE IDOC_CONTRL INDEX 1.
  IF SY-SUBRC <> 0.
    EXIT.
  ELSEIF IDOC_CONTRL-MESTYP <> 'ZCHGPOINT1_CREATE'.
    RAISE WRONG_FUNCTION_CALLED.
  ENDIF.

* go through all IDocs                                                 *
  LOOP AT IDOC_CONTRL.
*   select segments belonging to one IDoc                              *
    REFRESH T_EDIDD.
    LOOP AT IDOC_DATA WHERE DOCNUM = IDOC_CONTRL-DOCNUM.
      APPEND IDOC_DATA TO T_EDIDD.
    ENDLOOP.

*   through all segments of this IDoc                                  *
    CLEAR ERROR_FLAG.
    REFRESH BAPI_RETN_INFO.
    CATCH SYSTEM-EXCEPTIONS CONVERSION_ERRORS = 1.
    LOOP AT T_EDIDD INTO IDOC_DATA.

      CASE IDOC_DATA-SEGNAM.

        WHEN 'Z1ZCHGPOINT1_CREATE'.

        Z1ZCHGPOINT1_CREATE = IDOC_DATA-SDATA.
    MOVE Z1ZCHGPOINT1_CREATE-PROFILE
      TO PROFILE.
    MOVE Z1ZCHGPOINT1_CREATE-BOMUSAGE
      TO BOMUSAGE.
    MOVE Z1ZCHGPOINT1_CREATE-APPLICATION
      TO APPLICATION.


        WHEN 'E1BPFLAG'.

        E1BPFLAG = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BPFLAG
       TO TESTRUN."#EC ENHOK


        WHEN 'E1BP1012_TSK_C'.

        E1BP1012_TSK_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_TSK_C
       TO TASK."#EC ENHOK

      IF E1BP1012_TSK_C-VALID_FROM
         IS INITIAL.
  CLEAR TASK-VALID_FROM.
      ENDIF.
      IF E1BP1012_TSK_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR TASK-VALID_TO_DATE.
      ENDIF.
        APPEND TASK.

        WHEN 'E1BP1012_MTK_C'.

        E1BP1012_MTK_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_MTK_C
       TO MATERIALTASKALLOCATION."#EC ENHOK

      IF E1BP1012_MTK_C-VALID_FROM
         IS INITIAL.
  CLEAR MATERIALTASKALLOCATION-VALID_FROM.
      ENDIF.
      IF E1BP1012_MTK_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR MATERIALTASKALLOCATION-VALID_TO_DATE.
      ENDIF.
        APPEND MATERIALTASKALLOCATION.

        WHEN 'E1BP1012_SEQ_C'.

        E1BP1012_SEQ_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_SEQ_C
       TO SEQUENCE."#EC ENHOK

      IF E1BP1012_SEQ_C-VALID_FROM
         IS INITIAL.
  CLEAR SEQUENCE-VALID_FROM.
      ENDIF.
      IF E1BP1012_SEQ_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR SEQUENCE-VALID_TO_DATE.
      ENDIF.
        APPEND SEQUENCE.

        WHEN 'E1BP1012_OPR_C'.

        E1BP1012_OPR_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_OPR_C
       TO OPERATION."#EC ENHOK

      IF E1BP1012_OPR_C-VALID_FROM
         IS INITIAL.
  CLEAR OPERATION-VALID_FROM.
      ENDIF.
      IF E1BP1012_OPR_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR OPERATION-VALID_TO_DATE.
      ENDIF.
      IF E1BP1012_OPR_C-USERFIELD_DATE_08
         IS INITIAL.
  CLEAR OPERATION-USERFIELD_DATE_08.
      ENDIF.
      IF E1BP1012_OPR_C-USERFIELD_DATE_09
         IS INITIAL.
  CLEAR OPERATION-USERFIELD_DATE_09.
      ENDIF.
        APPEND OPERATION.

        WHEN 'E1BP1012_SUB_OPR_C'.

        E1BP1012_SUB_OPR_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_SUB_OPR_C
       TO SUBOPERATION."#EC ENHOK

      IF E1BP1012_SUB_OPR_C-VALID_FROM
         IS INITIAL.
  CLEAR SUBOPERATION-VALID_FROM.
      ENDIF.
      IF E1BP1012_SUB_OPR_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR SUBOPERATION-VALID_TO_DATE.
      ENDIF.
      IF E1BP1012_SUB_OPR_C-USERFIELD_DATE_08
         IS INITIAL.
  CLEAR SUBOPERATION-USERFIELD_DATE_08.
      ENDIF.
      IF E1BP1012_SUB_OPR_C-USERFIELD_DATE_09
         IS INITIAL.
  CLEAR SUBOPERATION-USERFIELD_DATE_09.
      ENDIF.
        APPEND SUBOPERATION.

        WHEN 'E1BP1012_REF_OPR_C'.

        E1BP1012_REF_OPR_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_REF_OPR_C
       TO REFERENCEOPERATION."#EC ENHOK

      IF E1BP1012_REF_OPR_C-VALID_FROM
         IS INITIAL.
  CLEAR REFERENCEOPERATION-VALID_FROM.
      ENDIF.
      IF E1BP1012_REF_OPR_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR REFERENCEOPERATION-VALID_TO_DATE.
      ENDIF.
        APPEND REFERENCEOPERATION.

        WHEN 'E1BP1012_WC_REF_OPR_C'.

        E1BP1012_WC_REF_OPR_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_WC_REF_OPR_C
       TO WORKCENTERREFERENCE."#EC ENHOK

      IF E1BP1012_WC_REF_OPR_C-VALID_FROM
         IS INITIAL.
  CLEAR WORKCENTERREFERENCE-VALID_FROM.
      ENDIF.
      IF E1BP1012_WC_REF_OPR_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR WORKCENTERREFERENCE-VALID_TO_DATE.
      ENDIF.
        APPEND WORKCENTERREFERENCE.

        WHEN 'E1BP1012_COM_C'.

        E1BP1012_COM_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_COM_C
       TO COMPONENTALLOCATION."#EC ENHOK

      IF E1BP1012_COM_C-VALID_FROM
         IS INITIAL.
  CLEAR COMPONENTALLOCATION-VALID_FROM.
      ENDIF.
      IF E1BP1012_COM_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR COMPONENTALLOCATION-VALID_TO_DATE.
      ENDIF.
        APPEND COMPONENTALLOCATION.

        WHEN 'E1BP1012_PRT_C'.

        E1BP1012_PRT_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_PRT_C
       TO PRODUCTIONRESOURCE."#EC ENHOK

      IF E1BP1012_PRT_C-VALID_FROM
         IS INITIAL.
  CLEAR PRODUCTIONRESOURCE-VALID_FROM.
      ENDIF.
      IF E1BP1012_PRT_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR PRODUCTIONRESOURCE-VALID_TO_DATE.
      ENDIF.
        APPEND PRODUCTIONRESOURCE.

        WHEN 'E1BP1012_CHA_C'.

        E1BP1012_CHA_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_CHA_C
       TO INSPCHARACTERISTIC."#EC ENHOK

      IF E1BP1012_CHA_C-VALID_FROM
         IS INITIAL.
  CLEAR INSPCHARACTERISTIC-VALID_FROM.
      ENDIF.
      IF E1BP1012_CHA_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR INSPCHARACTERISTIC-VALID_TO_DATE.
      ENDIF.
        APPEND INSPCHARACTERISTIC.

        WHEN 'E1BP1012_TXT_HDR_C'.

        E1BP1012_TXT_HDR_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_TXT_HDR_C
       TO TEXTALLOCATION."#EC ENHOK

      IF E1BP1012_TXT_HDR_C-VALID_FROM
         IS INITIAL.
  CLEAR TEXTALLOCATION-VALID_FROM.
      ENDIF.
      IF E1BP1012_TXT_HDR_C-VALID_TO_DATE
         IS INITIAL.
  CLEAR TEXTALLOCATION-VALID_TO_DATE.
      ENDIF.
        APPEND TEXTALLOCATION.

        WHEN 'E1BP1012_TXT_C'.

        E1BP1012_TXT_C = IDOC_DATA-SDATA.
    MOVE-CORRESPONDING E1BP1012_TXT_C
       TO TEXT."#EC ENHOK

        APPEND TEXT.

      ENDCASE.

    ENDLOOP.
    ENDCATCH.
    IF SY-SUBRC = 1.
*     write IDoc status-record as error and continue                   *
      CLEAR BAPI_RETN_INFO.
      BAPI_RETN_INFO-TYPE   = 'E'.
      BAPI_RETN_INFO-ID     = 'B1'.
      BAPI_RETN_INFO-NUMBER = '527'.
      BAPI_RETN_INFO-MESSAGE_V1 = IDOC_DATA-SEGNAM.
      BAPI_IDOC_STATUS      = '51'.
      PERFORM ZIDOC_STATUS_ZCHGPOINT1_CREATE
              TABLES T_EDIDD
                     IDOC_STATUS
                     RETURN_VARIABLES
               USING IDOC_CONTRL
                     BAPI_RETN_INFO
                     BAPI_IDOC_STATUS
                     WORKFLOW_RESULT.
      CONTINUE.
    ENDIF.
*   call BAPI-function in this system                                  *
    CALL FUNCTION 'ZBAPI_ROUTING_CREATE1'
       exporting
        TESTRUN = TESTRUN
        PROFILE = PROFILE
        BOMUSAGE = BOMUSAGE
        APPLICATION = APPLICATION
       importing
        GROUP = GROUP
        GROUPCOUNTER = GROUPCOUNTER
       tables
        TASK = TASK
        MATERIALTASKALLOCATION = MATERIALTASKALLOCATION
        SEQUENCE = SEQUENCE
        OPERATION = OPERATION
        SUBOPERATION = SUBOPERATION
        REFERENCEOPERATION = REFERENCEOPERATION
        WORKCENTERREFERENCE = WORKCENTERREFERENCE
        COMPONENTALLOCATION = COMPONENTALLOCATION
        PRODUCTIONRESOURCE = PRODUCTIONRESOURCE
        INSPCHARACTERISTIC = INSPCHARACTERISTIC
        TEXTALLOCATION = TEXTALLOCATION
        TEXT = TEXT
        RETURN = RETURN
       exceptions
        OTHERS =  1
         .
    IF SY-SUBRC <> 0.
*     write IDoc status-record as error                                *
      CLEAR BAPI_RETN_INFO.
      BAPI_RETN_INFO-TYPE       = 'E'.
      BAPI_RETN_INFO-ID         = SY-MSGID.
      BAPI_RETN_INFO-NUMBER     = SY-MSGNO.
      BAPI_RETN_INFO-MESSAGE_V1 = SY-MSGV1.
      BAPI_RETN_INFO-MESSAGE_V2 = SY-MSGV2.
      BAPI_RETN_INFO-MESSAGE_V3 = SY-MSGV3.
      BAPI_RETN_INFO-MESSAGE_V4 = SY-MSGV4.
      BAPI_IDOC_STATUS          = '51'.
      PERFORM ZIDOC_STATUS_ZCHGPOINT1_CREATE
              TABLES T_EDIDD
                     IDOC_STATUS
                     RETURN_VARIABLES
               USING IDOC_CONTRL
                     BAPI_RETN_INFO
                     BAPI_IDOC_STATUS
                     WORKFLOW_RESULT.
    ELSE.
      LOOP AT RETURN.
        IF NOT RETURN IS INITIAL.
          CLEAR BAPI_RETN_INFO.
          MOVE-CORRESPONDING RETURN TO BAPI_RETN_INFO."#EC ENHOK
          IF RETURN-TYPE = 'A' OR RETURN-TYPE = 'E'.
            ERROR_FLAG = 'X'.
          ENDIF.
          APPEND BAPI_RETN_INFO.
        ENDIF.
      ENDLOOP.
      LOOP AT BAPI_RETN_INFO.
*       write IDoc status-record                                       *
        IF ERROR_FLAG IS INITIAL.
          BAPI_IDOC_STATUS = '53'.
        ELSE.
          BAPI_IDOC_STATUS = '51'.
          IF BAPI_RETN_INFO-TYPE = 'S'.
            CONTINUE.
          ENDIF.
        ENDIF.
        PERFORM ZIDOC_STATUS_ZCHGPOINT1_CREATE
                TABLES T_EDIDD
                       IDOC_STATUS
                       RETURN_VARIABLES
                 USING IDOC_CONTRL
                       BAPI_RETN_INFO
                       BAPI_IDOC_STATUS
                       WORKFLOW_RESULT.
      ENDLOOP.
      IF SY-SUBRC <> 0.
*      'RETURN' is empty write idoc status-record as successful        *
        CLEAR BAPI_RETN_INFO.
        BAPI_RETN_INFO-TYPE       = 'S'.
        BAPI_RETN_INFO-ID         = 'B1'.
        BAPI_RETN_INFO-NUMBER     = '501'.
        BAPI_RETN_INFO-MESSAGE_V1 = 'CREATE'.
        BAPI_IDOC_STATUS          = '53'.
        PERFORM ZIDOC_STATUS_ZCHGPOINT1_CREATE
                TABLES T_EDIDD
                       IDOC_STATUS
                       RETURN_VARIABLES
                 USING IDOC_CONTRL
                       BAPI_RETN_INFO
                       BAPI_IDOC_STATUS
                       WORKFLOW_RESULT.
      ENDIF.
      IF ERROR_FLAG IS INITIAL.
*       write linked object keys                                       *
        CLEAR RETURN_VARIABLES.
        RETURN_VARIABLES-WF_PARAM = 'Appl_Objects'.
        READ TABLE RETURN_VARIABLES WITH KEY WF_PARAM = 'Appl_Objects'.
        MOVE GROUP
          TO RETURN_VARIABLES-DOC_NUMBER+00.
        IF SY-SUBRC <> 0.
          APPEND RETURN_VARIABLES.
        ELSE.
          MODIFY RETURN_VARIABLES INDEX SY-TABIX.
        ENDIF.
        READ TABLE RETURN_VARIABLES WITH KEY WF_PARAM = 'Appl_Objects'.
        MOVE GROUPCOUNTER
          TO RETURN_VARIABLES-DOC_NUMBER+08.
        IF SY-SUBRC <> 0.
          APPEND RETURN_VARIABLES.
        ELSE.
          MODIFY RETURN_VARIABLES INDEX SY-TABIX.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.                             " idoc_contrl






ENDFUNCTION.


* subroutine writing IDoc status-record                                *
FORM ZIDOC_STATUS_ZCHGPOINT1_CREATE
     TABLES IDOC_DATA    STRUCTURE  EDIDD
            IDOC_STATUS  STRUCTURE  BDIDOCSTAT
            R_VARIABLES  STRUCTURE  BDWFRETVAR
      USING IDOC_CONTRL  LIKE  EDIDC
            VALUE(RETN_INFO) LIKE   BAPIRET2
            STATUS       LIKE  BDIDOCSTAT-STATUS
            WF_RESULT    LIKE  BDWF_PARAM-RESULT.

  CLEAR IDOC_STATUS.
  IDOC_STATUS-DOCNUM   = IDOC_CONTRL-DOCNUM.
  IDOC_STATUS-MSGTY    = RETN_INFO-TYPE.
  IDOC_STATUS-MSGID    = RETN_INFO-ID.
  IDOC_STATUS-MSGNO    = RETN_INFO-NUMBER.
  IDOC_STATUS-APPL_LOG = RETN_INFO-LOG_NO.
  IDOC_STATUS-MSGV1    = RETN_INFO-MESSAGE_V1.
  IDOC_STATUS-MSGV2    = RETN_INFO-MESSAGE_V2.
  IDOC_STATUS-MSGV3    = RETN_INFO-MESSAGE_V3.
  IDOC_STATUS-MSGV4    = RETN_INFO-MESSAGE_V4.
  IDOC_STATUS-REPID    = SY-REPID.
  IDOC_STATUS-STATUS   = STATUS.

  CASE RETN_INFO-PARAMETER.
    WHEN 'INSPCHARACTERISTIC'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_CHA_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'COMPONENTALLOCATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_COM_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'MATERIALTASKALLOCATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_MTK_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'OPERATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_OPR_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'PRODUCTIONRESOURCE'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_PRT_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'REFERENCEOPERATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_REF_OPR_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'SEQUENCE'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_SEQ_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'SUBOPERATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_SUB_OPR_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'TASK'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_TSK_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'TEXT'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_TXT_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'TEXTALLOCATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_TXT_HDR_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'WORKCENTERREFERENCE'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BP1012_WC_REF_OPR_C'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'TESTRUN'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'E1BPFLAG'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'PROFILE'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'Z1ZCHGPOINT1_CREATE'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'BOMUSAGE'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'Z1ZCHGPOINT1_CREATE'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN 'APPLICATION'
         .
      LOOP AT IDOC_DATA WHERE
                        SEGNAM = 'Z1ZCHGPOINT1_CREATE'.
        RETN_INFO-ROW = RETN_INFO-ROW - 1.
        IF RETN_INFO-ROW <= 0.
          IDOC_STATUS-SEGNUM = IDOC_DATA-SEGNUM.
          IDOC_STATUS-SEGFLD = RETN_INFO-FIELD.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN OTHERS.

  ENDCASE.

  INSERT IDOC_STATUS INDEX 1.

  IF IDOC_STATUS-STATUS = '51'.
    WF_RESULT = '99999'.
    R_VARIABLES-WF_PARAM   = 'Error_IDOCs'.
    R_VARIABLES-DOC_NUMBER = IDOC_CONTRL-DOCNUM.
    READ TABLE R_VARIABLES FROM R_VARIABLES.
    IF SY-SUBRC <> 0.
      APPEND R_VARIABLES.
    ENDIF.
  ELSEIF IDOC_STATUS-STATUS = '53'.
    CLEAR WF_RESULT.
    R_VARIABLES-WF_PARAM = 'Processed_IDOCs'.
    R_VARIABLES-DOC_NUMBER = IDOC_CONTRL-DOCNUM.
    READ TABLE R_VARIABLES FROM R_VARIABLES.
    IF SY-SUBRC <> 0.
      APPEND R_VARIABLES.
    ENDIF.
    R_VARIABLES-WF_PARAM = 'Appl_Object_Type'.
    R_VARIABLES-DOC_NUMBER = 'ZCHGPOINT1'.
    READ TABLE R_VARIABLES FROM R_VARIABLES.
    IF SY-SUBRC <> 0.
      APPEND R_VARIABLES.
    ENDIF.
  ENDIF.

ENDFORM.                               " ZIDOC_STATUS_ZCHGPOINT1_CREATE
